//Use anko library in the build.gradle ----->          implementation "org.jetbrains.anko:anko-commons:0.10.1"            

                MAKING CALL

            *In the manifest

             <uses-permission android:name="android.permission.CALL_PHONE"/>

            *On the listener

            makeCall("0714359957")

                SENDING SMS

            *In the manifest

            <uses-permission android:name="android.permission.SEND_SMS"/>

            *On the listener

            sendSMS("0714359957","Niaje brathe")

                SENDING EMAIL

            email("abc@gmail","JOB APPLICATION","Hello sir...")

                SHARING TEXT CONTENT 
   
            share("Hey there")


                OPENING STK

            val simToolKitLaunchIntent: Intent? =
                this@MainActivity.getPackageManager().getLaunchIntentForPackage("com.android.stk")
            simToolKitLaunchIntent?.let { startActivity(it) }



                LAUNCHING CAMERA AND TAKING A PIC

            *In the manifest

            <uses-permission android:name="android.permission.CAMERA"/>
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

            *On the listener
            
            //if system os is Marshmallow or Above, we need to request runtime permission
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
                if (checkSelfPermission(Manifest.permission.CAMERA)
                    == PackageManager.PERMISSION_DENIED ||
                    checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_DENIED){
                    //permission was not enabled
                    val permission = arrayOf(Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    //show popup to request permission
                    requestPermissions(permission, PERMISSION_CODE)
                }
                else{
                    //permission already granted
                    openCamera()
                }
            }
            else{
                //system os is < marshmallow
                openCamera()
            }

            *To open camera

            //Function to open camera
            private fun openCamera() {
                val values = ContentValues()
                values.put(MediaStore.Images.Media.TITLE, "New Picture")
                values.put(MediaStore.Images.Media.DESCRIPTION, "From the Camera")
                image_uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)
                //camera intent
                val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, image_uri)
                startActivityForResult(cameraIntent, IMAGE_CAPTURE_CODE)
            }


            *To request permisions from the user

             //Requesting permision from the user
            override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
                //called when user presses ALLOW or DENY from Permission Request Popup
                when(requestCode){
                    PERMISSION_CODE -> {
                        if (grantResults.size > 0 && grantResults[0] ==
                            PackageManager.PERMISSION_GRANTED){
                            //permission from popup was granted
                            openCamera()
                        }
                        else{
                            //permission from popup was denied
                            Toast.makeText(this, "Permission denied", Toast.LENGTH_SHORT).show()
                        }
                    }
                }
            }



            *To set the image on the imageview


            override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
                    super.onActivityResult(requestCode, resultCode, data)
                    //called when image was captured from camera intent
                    if (resultCode == Activity.RESULT_OK){
                        //set image captured to image view
                        mImageMine.setImageURI(image_uri)
                    }
                }











